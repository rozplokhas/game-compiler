<prog>              ::= <function> | <let> | <new_var> | <block>

<function>          ::= '\'   <var_definition> {var_definition} '->' <prog>
<let>               ::= 'let' <var_definition> '=' <prog>       'in' <prog>
<new_var>           ::= 'new' <identifier>                      'in' <prog>

<block>             ::= <instruction> {';' <instruction>}
<instruction>       ::= <action> | <while_statement>
<while_statement>   ::= 'while' <expr> 'do' <action>
<action>            ::= <expr> | <expr> ':=' <expr>

<expr>              ::= <arithm_expr> |  <if_statement>
<if_statement>      ::= 'if' <expr> 'then' <expr> 'else' <expr>

<aritm_expr>        ::= <disjunct> | <disjunct> '||' <disjunct>
<disjunct>          ::= <conjunct> | <conjunct> '&&' <conjunct>
<conjunct>          ::= <sum> | <sum> '==' <sum> | <sum> '!=' <sum>
                              | <sum> '<'  <sum> | <sum> '>'  <sum>
                              | <sum> '<=' <sum> | <sum> '>=' <sum>

<sum>               ::= <product> | <product> '+' <sum> | <product> '-' <sum>
<product>           ::= <application> | <application> '*' <product> 
                                      | <application> '/' <product> 
                                      | <application> '%' <product>

<application>       ::= <value> {<value>}
<value>             ::= <atom> | '!' <atom>
<atom>              ::= <identifier> | <number> | '(' <prog> ')'

<var_definition>    ::= <identifier> ':' <type>
<type>              ::= 'N' | <type> {'->' <type>} | '(' <type> ')'

<identifier>        ::= <lower_case_letter> {<ident_char>} | '_' {ident_char} letter {ident_char}
<number>            ::= <digit> {<digit>}

<ident_char>        ::= <letter> | '_'
<letter>            ::= <lower_case_letter> | <upper_case_letter>

<lower_case_letter> ::= 'a' | ... | 'z'
<upper_case_letter> ::= 'A' | ... | 'Z'
<digit>             ::= '0' | ... | '9'
