let pow : N->N->N = \x:N n:N ->
    new i   in
    new res in
    i := n;
    res := 1;
    while !i do (
        res := !res * x;
        i := !i - 1
    );
    !res
in

let fib : N->N = \n:N ->
    new d0 in
    new d1 in
    new i  in
    d0 := 0;
    d1 := 1;
    i := 0;
    while !i != n do (
        d1 := !d0 + !d1;
        d0 := !d1 - !d0;
        i := !i + 1
    );
    !d0
in

let apply_to_2 : (N->N)->N = \f:N->N ->
    f 2
in

let diverge : N = while 1 do 0
in

let assertTrue : N->N = \t:N ->
    if t then 0 else diverge
in

assertTrue (pow 2 10 == 1024);
assertTrue (4 - 2 * 0 - 1 - 1 == 2);
fib (apply_to_2 (pow 4))
